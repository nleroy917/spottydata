{"version":3,"sources":["../../lib/verifyAndLint.ts"],"names":["verifyAndLint","dir","configLintDirs","numWorkers","enableWorkerThreads","telemetry","lintWorkers","Worker","require","resolve","getStdout","pipe","process","stdout","getStderr","stderr","lintDirs","ESLINT_DEFAULT_DIRS","reduce","res","d","currDir","push","lintResults","runLintCheck","lintOutput","output","eventInfo","record","buildLint","isError","flush","CompileError","console","log","end","err","type","error","chalk","red","message","exit"],"mappings":"yEAAA,oDACA,uCACA,sBACA,0BACA,sCAEA,2CACA,6C,mFAEO,cAAeA,CAAAA,aAAf,CACLC,GADK,CAELC,cAFK,CAGLC,UAHK,CAILC,mBAJK,CAKLC,SALK,CAMU,CACf,GAAI,CACF,KAAMC,CAAAA,WAAW,CAAG,GAAIC,mBAAJ,CAAWC,OAAO,CAACC,OAAR,CAAgB,uBAAhB,CAAX,CAAqD,CACvEN,UADuE,CAEvEC,mBAFuE,CAArD,CAApB,CAOAE,WAAW,CAACI,SAAZ,GAAwBC,IAAxB,CAA6BC,OAAO,CAACC,MAArC,EACAP,WAAW,CAACQ,SAAZ,GAAwBH,IAAxB,CAA6BC,OAAO,CAACG,MAArC,EAEA,KAAMC,CAAAA,QAAQ,CAAG,CAACd,cAAD,OAACA,cAAD,CAAmBe,8BAAnB,EAAwCC,MAAxC,CACf,CAACC,GAAD,CAAgBC,CAAhB,GAA8B,CAC5B,KAAMC,CAAAA,OAAO,CAAG,eAAKpB,GAAL,CAAUmB,CAAV,CAAhB,CACA,GAAI,CAAC,mBAAWC,OAAX,CAAL,CAA0B,MAAOF,CAAAA,GAAP,CAC1BA,GAAG,CAACG,IAAJ,CAASD,OAAT,EACA,MAAOF,CAAAA,GAAP,CACD,CANc,CAOf,EAPe,CAAjB,CAUA,KAAMI,CAAAA,WAAW,CAAG,KAAMjB,CAAAA,WAAW,CAACkB,YAAZ,CAAyBvB,GAAzB,CAA8Be,QAA9B,CAAwC,IAAxC,CAA1B,CACA,KAAMS,CAAAA,UAAU,CACd,MAAOF,CAAAA,WAAP,GAAuB,QAAvB,CAAkCA,WAAlC,CAAgDA,WAAhD,cAAgDA,WAAW,CAAEG,MAD/D,CAGA,GAAI,MAAOH,CAAAA,WAAP,GAAuB,QAAvB,EAAmCA,WAAnC,QAAmCA,WAAW,CAAEI,SAApD,CAA+D,CAC7DtB,SAAS,CAACuB,MAAV,CACE,oCAAwB,CACtB,GAAGL,WAAW,CAACI,SADO,CAEtBE,SAAS,CAAE,IAFW,CAAxB,CADF,EAMD,CAED,GAAI,MAAON,CAAAA,WAAP,GAAuB,QAAvB,EAAmCA,WAAnC,QAAmCA,WAAW,CAAEO,OAAhD,EAA2DL,UAA/D,CAA2E,CACzE,KAAMpB,CAAAA,SAAS,CAAC0B,KAAV,EAAN,CACA,KAAM,IAAIC,2BAAJ,CAAiBP,UAAjB,CAAN,CACD,CAED,GAAIA,UAAJ,CAAgB,CACdQ,OAAO,CAACC,GAAR,CAAYT,UAAZ,EACD,CAEDnB,WAAW,CAAC6B,GAAZ,GACD,CAAC,MAAOC,GAAP,CAAY,CACZ,GAAIA,GAAG,CAACC,IAAJ,GAAa,cAAb,EAA+BD,GAAG,WAAYJ,2BAAlD,CAAgE,CAC9DC,OAAO,CAACK,KAAR,CAAcC,eAAMC,GAAN,CAAU,sBAAV,CAAd,EACAP,OAAO,CAACK,KAAR,CAAcF,GAAG,CAACK,OAAlB,EACA7B,OAAO,CAAC8B,IAAR,CAAa,CAAb,EACD,CAJD,IAIO,IAAIN,GAAG,CAACC,IAAJ,GAAa,YAAjB,CAA+B,CACpCJ,OAAO,CAACK,KAAR,CAAcF,GAAG,CAACK,OAAlB,EACA7B,OAAO,CAAC8B,IAAR,CAAa,CAAb,EACD,CACD,KAAMN,CAAAA,GAAN,CACD,CACF","sourcesContent":["import chalk from 'chalk'\nimport { Worker } from 'jest-worker'\nimport { existsSync } from 'fs'\nimport { join } from 'path'\nimport { ESLINT_DEFAULT_DIRS } from './constants'\nimport { Telemetry } from '../telemetry/storage'\nimport { eventLintCheckCompleted } from '../telemetry/events'\nimport { CompileError } from './compile-error'\n\nexport async function verifyAndLint(\n  dir: string,\n  configLintDirs: string[] | undefined,\n  numWorkers: number | undefined,\n  enableWorkerThreads: boolean | undefined,\n  telemetry: Telemetry\n): Promise<void> {\n  try {\n    const lintWorkers = new Worker(require.resolve('./eslint/runLintCheck'), {\n      numWorkers,\n      enableWorkerThreads,\n    }) as Worker & {\n      runLintCheck: typeof import('./eslint/runLintCheck').runLintCheck\n    }\n\n    lintWorkers.getStdout().pipe(process.stdout)\n    lintWorkers.getStderr().pipe(process.stderr)\n\n    const lintDirs = (configLintDirs ?? ESLINT_DEFAULT_DIRS).reduce(\n      (res: string[], d: string) => {\n        const currDir = join(dir, d)\n        if (!existsSync(currDir)) return res\n        res.push(currDir)\n        return res\n      },\n      []\n    )\n\n    const lintResults = await lintWorkers.runLintCheck(dir, lintDirs, true)\n    const lintOutput =\n      typeof lintResults === 'string' ? lintResults : lintResults?.output\n\n    if (typeof lintResults !== 'string' && lintResults?.eventInfo) {\n      telemetry.record(\n        eventLintCheckCompleted({\n          ...lintResults.eventInfo,\n          buildLint: true,\n        })\n      )\n    }\n\n    if (typeof lintResults !== 'string' && lintResults?.isError && lintOutput) {\n      await telemetry.flush()\n      throw new CompileError(lintOutput)\n    }\n\n    if (lintOutput) {\n      console.log(lintOutput)\n    }\n\n    lintWorkers.end()\n  } catch (err) {\n    if (err.type === 'CompileError' || err instanceof CompileError) {\n      console.error(chalk.red('\\nFailed to compile.'))\n      console.error(err.message)\n      process.exit(1)\n    } else if (err.type === 'FatalError') {\n      console.error(err.message)\n      process.exit(1)\n    }\n    throw err\n  }\n}\n"]}