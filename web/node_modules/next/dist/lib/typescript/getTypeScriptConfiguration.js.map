{"version":3,"sources":["../../../lib/typescript/getTypeScriptConfiguration.ts"],"names":["getTypeScriptConfiguration","ts","tsConfigPath","metaOnly","formatDiagnosticsHost","getCanonicalFileName","fileName","getCurrentDirectory","sys","getNewLine","os","EOL","config","error","readConfigFile","readFile","FatalError","formatDiagnostic","configToParse","result","parseJsonConfigFileContent","readDirectory","_path","extensions","_excludes","_includes","_depth","path","dirname","errors","filter","code","length","err","name","reason","message","chalk","red","bold","cyan"],"mappings":"mGAAA,oDACA,8CACA,mDAEA,0C,mFAEO,cAAeA,CAAAA,0BAAf,CACLC,EADK,CAELC,YAFK,CAGLC,QAHK,CAI4C,CACjD,GAAI,oBACF,KAAMC,CAAAA,qBAAiE,CAAG,CACxEC,oBAAoB,CAAGC,QAAD,EAAsBA,QAD4B,CAExEC,mBAAmB,CAAEN,EAAE,CAACO,GAAH,CAAOD,mBAF4C,CAGxEE,UAAU,CAAE,IAAMC,YAAGC,GAHmD,CAA1E,CAMA,KAAM,CAAEC,MAAF,CAAUC,KAAV,EAAoBZ,EAAE,CAACa,cAAH,CAAkBZ,YAAlB,CAAgCD,EAAE,CAACO,GAAH,CAAOO,QAAvC,CAA1B,CACA,GAAIF,KAAJ,CAAW,CACT,KAAM,IAAIG,uBAAJ,CAAef,EAAE,CAACgB,gBAAH,CAAoBJ,KAApB,CAA2BT,qBAA3B,CAAf,CAAN,CACD,CAED,GAAIc,CAAAA,aAAkB,CAAGN,MAAzB,CAEA,KAAMO,CAAAA,MAAM,CAAGlB,EAAE,CAACmB,0BAAH,CACbF,aADa,CAEb;AACA;AACAf,QAAQ,CACJ,CACE,GAAGF,EAAE,CAACO,GADR,CAEEa,aAAa,CAACC,KAAD,CAAQC,UAAR,CAAoBC,SAApB,CAA+BC,SAA/B,CAA0CC,MAA1C,CAAkD,CAC7D,MAAO,CAACH,UAAU,CAAI,OAAMA,UAAU,CAAC,CAAD,CAAI,EAAxB,CAA6B,SAAxC,CAAP,CACD,CAJH,CADI,CAOJtB,EAAE,CAACO,GAXM,CAYbmB,eAAKC,OAAL,CAAa1B,YAAb,CAZa,CAAf,CAeA,GAAIiB,MAAM,CAACU,MAAX,CAAmB,CACjBV,MAAM,CAACU,MAAP,CAAgBV,MAAM,CAACU,MAAP,CAAcC,MAAd,CACd,CAAC,CAAEC,IAAF,CAAD,GACE;AACAA,IAAI,GAAK,KAHG,CAAhB,CAKD,CAED,mBAAIZ,MAAM,CAACU,MAAX,SAAI,eAAeG,MAAnB,CAA2B,CACzB,KAAM,IAAIhB,uBAAJ,CACJf,EAAE,CAACgB,gBAAH,CAAoBE,MAAM,CAACU,MAAP,CAAc,CAAd,CAApB,CAAsCzB,qBAAtC,CADI,CAAN,CAGD,CAED,MAAOe,CAAAA,MAAP,CACD,CAAC,MAAOc,GAAP,CAAY,CACZ,GAAI,CAAAA,GAAG,MAAH,QAAAA,GAAG,CAAEC,IAAL,IAAc,aAAlB,CAAiC,kBAC/B,KAAMC,CAAAA,MAAM,CAAG,oBAAQF,GAAR,cAAQA,GAAG,CAAEG,OAAb,qBAAwB,EAAxB,CAAf,CACA,KAAM,IAAIpB,uBAAJ,CACJqB,eAAMC,GAAN,CAAUC,IAAV,CACE,iBADF,CAEEF,eAAMG,IAAN,CAAW,eAAX,EACE,GADF,CAEE,2DAJJ,EAKIL,MANA,CAAN,CAQD,CACD,KAAMF,CAAAA,GAAN,CACD,CACF","sourcesContent":["import chalk from 'chalk'\nimport os from 'os'\nimport path from 'path'\n\nimport { FatalError } from '../fatal-error'\n\nexport async function getTypeScriptConfiguration(\n  ts: typeof import('typescript'),\n  tsConfigPath: string,\n  metaOnly?: boolean\n): Promise<import('typescript').ParsedCommandLine> {\n  try {\n    const formatDiagnosticsHost: import('typescript').FormatDiagnosticsHost = {\n      getCanonicalFileName: (fileName: string) => fileName,\n      getCurrentDirectory: ts.sys.getCurrentDirectory,\n      getNewLine: () => os.EOL,\n    }\n\n    const { config, error } = ts.readConfigFile(tsConfigPath, ts.sys.readFile)\n    if (error) {\n      throw new FatalError(ts.formatDiagnostic(error, formatDiagnosticsHost))\n    }\n\n    let configToParse: any = config\n\n    const result = ts.parseJsonConfigFileContent(\n      configToParse,\n      // When only interested in meta info,\n      // avoid enumerating all files (for performance reasons)\n      metaOnly\n        ? {\n            ...ts.sys,\n            readDirectory(_path, extensions, _excludes, _includes, _depth) {\n              return [extensions ? `file${extensions[0]}` : `file.ts`]\n            },\n          }\n        : ts.sys,\n      path.dirname(tsConfigPath)\n    )\n\n    if (result.errors) {\n      result.errors = result.errors.filter(\n        ({ code }) =>\n          // No inputs were found in config file\n          code !== 18003\n      )\n    }\n\n    if (result.errors?.length) {\n      throw new FatalError(\n        ts.formatDiagnostic(result.errors[0], formatDiagnosticsHost)\n      )\n    }\n\n    return result\n  } catch (err) {\n    if (err?.name === 'SyntaxError') {\n      const reason = '\\n' + (err?.message ?? '')\n      throw new FatalError(\n        chalk.red.bold(\n          'Could not parse',\n          chalk.cyan('tsconfig.json') +\n            '.' +\n            ' Please make sure it contains syntactically correct JSON.'\n        ) + reason\n      )\n    }\n    throw err\n  }\n}\n"]}