{"version":3,"sources":["../../../lib/eslint/writeDefaultConfig.ts"],"names":["writeDefaultConfig","eslintrcFile","pkgJsonPath","packageJsonConfig","defaultConfig","extends","content","fs","readFile","encoding","then","txt","trim","replace","ext","path","extname","newFileContent","CommentJson","stringify","writeFile","os","EOL","console","log","chalk","green","bold","basename","eslintConfig","Object","entries","length"],"mappings":"mFAAA,sBACA,oDACA,8CACA,kDAEA,oF,w4BAEO,cAAeA,CAAAA,kBAAf,CACLC,YADK,CAELC,WAFK,CAGLC,iBAHK,CAIL,CACA,KAAMC,CAAAA,aAAa,CAAG,CACpBC,OAAO,CAAE,MADW,CAAtB,CAIA,GAAIJ,YAAJ,CAAkB,CAChB,KAAMK,CAAAA,OAAO,CAAG,KAAMC,cAAGC,QAAH,CAAYP,YAAZ,CAA0B,CAAEQ,QAAQ,CAAE,MAAZ,CAA1B,EAAgDC,IAAhD,CACnBC,GAAD,EAASA,GAAG,CAACC,IAAJ,GAAWC,OAAX,CAAmB,KAAnB,CAA0B,EAA1B,CADW,CAEpB,IAAM,IAFc,CAAtB,CAKA,GACEP,OAAO,GAAK,EAAZ,EACAA,OAAO,GAAK,IADZ,EAEAA,OAAO,GAAK,KAFZ,EAGAA,OAAO,GAAK,qBAJd,CAKE,CACA,KAAMQ,CAAAA,GAAG,CAAGC,cAAKC,OAAL,CAAaf,YAAb,CAAZ,CAEA,GAAIgB,CAAAA,cAAJ,CACA,GAAIH,GAAG,GAAK,OAAR,EAAmBA,GAAG,GAAK,MAA/B,CAAuC,CACrCG,cAAc,CAAG,iBAAjB,CACD,CAFD,IAEO,CACLA,cAAc,CAAGC,WAAW,CAACC,SAAZ,CAAsBf,aAAtB,CAAqC,IAArC,CAA2C,CAA3C,CAAjB,CAEA,GAAIU,GAAG,GAAK,KAAZ,CAAmB,CACjBG,cAAc,CAAG,oBAAsBA,cAAvC,CACD,CACF,CAED,KAAMV,cAAGa,SAAH,CAAanB,YAAb,CAA2BgB,cAAc,CAAGI,YAAGC,GAA/C,CAAN,CAEAC,OAAO,CAACC,GAAR,CACEC,eAAMC,KAAN,CACG,mDAAkDD,eAAME,IAAN,CACjDZ,cAAKa,QAAL,CAAc3B,YAAd,CADiD,CAEjD,4EAHJ,CADF,EAOD,CACF,CAnCD,IAmCO,IAAIE,iBAAJ,QAAIA,iBAAiB,CAAE0B,YAAvB,CAAqC,CAC1C;AACA,GAAIC,MAAM,CAACC,OAAP,CAAe5B,iBAAf,cAAeA,iBAAiB,CAAE0B,YAAlC,EAAgDG,MAAhD,GAA2D,CAA/D,CAAkE,CAChE7B,iBAAiB,CAAC0B,YAAlB,CAAiCzB,aAAjC,CAEA,GAAIF,WAAJ,CACE,KAAMK,cAAGa,SAAH,CACJlB,WADI,CAEJgB,WAAW,CAACC,SAAZ,CAAsBhB,iBAAtB,CAAyC,IAAzC,CAA+C,CAA/C,EAAoDkB,YAAGC,GAFnD,CAAN,CAKFC,OAAO,CAACC,GAAR,CACEC,eAAMC,KAAN,CACG,wBAAuBD,eAAME,IAAN,CACtB,cADsB,CAEtB,iGAHJ,CADF,EAOD,CACF,CAnBM,IAmBA,CACL,KAAMpB,cAAGa,SAAH,CACJ,WADI,CAEJF,WAAW,CAACC,SAAZ,CAAsBf,aAAtB,CAAqC,IAArC,CAA2C,CAA3C,EAAgDiB,YAAGC,GAF/C,CAAN,CAKAC,OAAO,CAACC,GAAR,CACEC,eAAMC,KAAN,CACG,kBAAiBD,eAAME,IAAN,CAChB,WADgB,CAEhB,mEAHJ,CADF,EAOD,CACF","sourcesContent":["import { promises as fs } from 'fs'\nimport chalk from 'chalk'\nimport os from 'os'\nimport path from 'path'\n\nimport * as CommentJson from 'next/dist/compiled/comment-json'\n\nexport async function writeDefaultConfig(\n  eslintrcFile: string | null,\n  pkgJsonPath: string | null,\n  packageJsonConfig: { eslintConfig: any } | null\n) {\n  const defaultConfig = {\n    extends: 'next',\n  }\n\n  if (eslintrcFile) {\n    const content = await fs.readFile(eslintrcFile, { encoding: 'utf8' }).then(\n      (txt) => txt.trim().replace(/\\n/g, ''),\n      () => null\n    )\n\n    if (\n      content === '' ||\n      content === '{}' ||\n      content === '---' ||\n      content === 'module.exports = {}'\n    ) {\n      const ext = path.extname(eslintrcFile)\n\n      let newFileContent\n      if (ext === '.yaml' || ext === '.yml') {\n        newFileContent = \"extends: 'next'\"\n      } else {\n        newFileContent = CommentJson.stringify(defaultConfig, null, 2)\n\n        if (ext === '.js') {\n          newFileContent = 'module.exports = ' + newFileContent\n        }\n      }\n\n      await fs.writeFile(eslintrcFile, newFileContent + os.EOL)\n\n      console.log(\n        chalk.green(\n          `We detected an empty ESLint configuration file (${chalk.bold(\n            path.basename(eslintrcFile)\n          )}) and updated it for you to include the base Next.js ESLint configuration.`\n        )\n      )\n    }\n  } else if (packageJsonConfig?.eslintConfig) {\n    // Creates .eslintrc only if package.json's eslintConfig field is empty\n    if (Object.entries(packageJsonConfig?.eslintConfig).length === 0) {\n      packageJsonConfig.eslintConfig = defaultConfig\n\n      if (pkgJsonPath)\n        await fs.writeFile(\n          pkgJsonPath,\n          CommentJson.stringify(packageJsonConfig, null, 2) + os.EOL\n        )\n\n      console.log(\n        chalk.green(\n          `We detected an empty ${chalk.bold(\n            'eslintConfig'\n          )} field in package.json and updated it for you to include the base Next.js ESLint configuration.`\n        )\n      )\n    }\n  } else {\n    await fs.writeFile(\n      '.eslintrc',\n      CommentJson.stringify(defaultConfig, null, 2) + os.EOL\n    )\n\n    console.log(\n      chalk.green(\n        `We created the ${chalk.bold(\n          '.eslintrc'\n        )} file for you and included the base Next.js ESLint configuration.`\n      )\n    )\n  }\n}\n"]}