{"version":3,"sources":["../../../../build/webpack/loaders/next-image-loader.js"],"names":["BLUR_IMG_SIZE","BLUR_QUALITY","VALID_BLUR_EXT","nextImageLoader","content","context","rootContext","opts","interpolatedName","loaderUtils","interpolateName","extension","imageSize","blurDataURL","includes","resizeOperationOpts","width","height","type","resizedImage","toString","stringifiedData","JSON","stringify","src","emitFile","raw"],"mappings":"wEAAA,oFACA,6DACA,kE,mFAEA,KAAMA,CAAAA,aAAa,CAAG,CAAtB,CACA,KAAMC,CAAAA,YAAY,CAAG,EAArB,CACA,KAAMC,CAAAA,cAAc,CAAG,CAAC,MAAD,CAAS,KAAT,CAAgB,MAAhB,CAAvB,CAEA,cAAeC,CAAAA,eAAf,CAA+BC,OAA/B,CAAwC,CACtC,KAAMC,CAAAA,OAAO,CAAG,KAAKC,WAArB,CACA,KAAMC,CAAAA,IAAI,CAAG,CAAEF,OAAF,CAAWD,OAAX,CAAb,CACA,KAAMI,CAAAA,gBAAgB,CAAGC,qBAAYC,eAAZ,CACvB,IADuB,CAEvB,yCAFuB,CAGvBH,IAHuB,CAAzB,CAMA,GAAII,CAAAA,SAAS,CAAGF,qBAAYC,eAAZ,CAA4B,IAA5B,CAAkC,OAAlC,CAA2CH,IAA3C,CAAhB,CACA,GAAII,SAAS,GAAK,KAAlB,CAAyB,CACvBA,SAAS,CAAG,MAAZ,CACD,CAED,KAAMC,CAAAA,SAAS,CAAG,uBAAOR,OAAP,CAAlB,CACA,GAAIS,CAAAA,WAAJ,CACA,GAAIX,cAAc,CAACY,QAAf,CAAwBH,SAAxB,CAAJ,CAAwC,CACtC;AACA,KAAMI,CAAAA,mBAAmB,CACvBH,SAAS,CAACI,KAAV,EAAmBJ,SAAS,CAACK,MAA7B,CACI,CAAEC,IAAI,CAAE,QAAR,CAAkBF,KAAK,CAAEhB,aAAzB,CADJ,CAEI,CAAEkB,IAAI,CAAE,QAAR,CAAkBD,MAAM,CAAEjB,aAA1B,CAHN,CAIA,KAAMmB,CAAAA,YAAY,CAAG,KAAM,wBACzBf,OADyB,CAEzB,CAACW,mBAAD,CAFyB,CAGzBJ,SAHyB,CAIzBV,YAJyB,CAA3B,CAMAY,WAAW,CAAI,cAAaF,SAAU,WAAUQ,YAAY,CAACC,QAAb,CAC9C,QAD8C,CAE9C,EAFF,CAGD,CAED,KAAMC,CAAAA,eAAe,CAAGC,IAAI,CAACC,SAAL,CAAe,CACrCC,GAAG,CAAE,SAAWhB,gBADqB,CAErCS,MAAM,CAAEL,SAAS,CAACK,MAFmB,CAGrCD,KAAK,CAAEJ,SAAS,CAACI,KAHoB,CAIrCH,WAJqC,CAAf,CAAxB,CAOA,KAAKY,QAAL,CAAcjB,gBAAd,CAAgCJ,OAAhC,CAAyC,IAAzC,EAEA,MAAQ,GAAE,iBAAkB,IAAGiB,eAAgB,GAA/C,CACD,CACM,KAAMK,CAAAA,GAAG,CAAG,IAAZ,C,6BACQvB,e","sourcesContent":["import loaderUtils from 'next/dist/compiled/loader-utils'\nimport sizeOf from 'image-size'\nimport { processBuffer } from '../../../next-server/server/lib/squoosh/main'\n\nconst BLUR_IMG_SIZE = 8\nconst BLUR_QUALITY = 70\nconst VALID_BLUR_EXT = ['jpeg', 'png', 'webp']\n\nasync function nextImageLoader(content) {\n  const context = this.rootContext\n  const opts = { context, content }\n  const interpolatedName = loaderUtils.interpolateName(\n    this,\n    '/static/image/[path][name].[hash].[ext]',\n    opts\n  )\n\n  let extension = loaderUtils.interpolateName(this, '[ext]', opts)\n  if (extension === 'jpg') {\n    extension = 'jpeg'\n  }\n\n  const imageSize = sizeOf(content)\n  let blurDataURL\n  if (VALID_BLUR_EXT.includes(extension)) {\n    // Shrink the image's largest dimension\n    const resizeOperationOpts =\n      imageSize.width >= imageSize.height\n        ? { type: 'resize', width: BLUR_IMG_SIZE }\n        : { type: 'resize', height: BLUR_IMG_SIZE }\n    const resizedImage = await processBuffer(\n      content,\n      [resizeOperationOpts],\n      extension,\n      BLUR_QUALITY\n    )\n    blurDataURL = `data:image/${extension};base64,${resizedImage.toString(\n      'base64'\n    )}`\n  }\n\n  const stringifiedData = JSON.stringify({\n    src: '/_next' + interpolatedName,\n    height: imageSize.height,\n    width: imageSize.width,\n    blurDataURL,\n  })\n\n  this.emitFile(interpolatedName, content, null)\n\n  return `${'export default '} ${stringifiedData};`\n}\nexport const raw = true\nexport default nextImageLoader\n"]}