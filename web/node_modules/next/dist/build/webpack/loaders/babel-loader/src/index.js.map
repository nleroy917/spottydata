{"version":3,"sources":["../../../../../../build/webpack/loaders/babel-loader/src/index.js"],"names":["babel","require","makeLoader","callback","overrides","source","inputSourceMap","cb","async","loader","call","then","args","err","loaderSpan","currentTraceSpan","id","traceAsyncFn","filename","resourcePath","setAttribute","loaderOptions","loaderUtils","getOptions","customOptions","customoptionsSpan","result","map","custom","Object","prototype","hasOwnProperty","assign","sourceMaps","sourceMap","programmaticOptions","undefined","sourceFileName","caller","name","target","supportsStaticESM","supportsDynamicImport","supportsTopLevelAwait","cacheDirectory","cacheIdentifier","partialConfigSpan","config","traceFn","loadPartialConfig","options","overridesSpan","cacheCompression","transformSpan","babelrc","addDependency","code"],"mappings":"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","sourcesContent":["// import babel from 'next/dist/compiled/babel/core'\nimport loaderUtils from 'next/dist/compiled/loader-utils'\nimport { trace } from '../../../../../telemetry/trace'\nimport cache from './cache'\nimport transform from './transform'\n\n// When using `import` Babel will be undefined\nconst babel = require('next/dist/compiled/babel/core')\n\nexport default function makeLoader(callback) {\n  const overrides = callback(babel)\n\n  return function (source, inputSourceMap) {\n    // Make the loader async\n    const cb = this.async()\n\n    loader.call(this, source, inputSourceMap, overrides).then(\n      (args) => cb(null, ...args),\n      (err) => cb(err)\n    )\n  }\n}\n\nasync function loader(source, inputSourceMap, overrides) {\n  // this.currentTraceSpan is provided by profiling-plugin.ts\n  const loaderSpan = trace('babel-loader', this.currentTraceSpan?.id)\n\n  return loaderSpan.traceAsyncFn(async () => {\n    const filename = this.resourcePath\n    loaderSpan.setAttribute('filename', filename)\n\n    let loaderOptions = loaderUtils.getOptions(this) || {}\n\n    let customOptions\n    if (overrides && overrides.customOptions) {\n      const customoptionsSpan = trace('loader-overrides-customoptions')\n      const result = await customoptionsSpan.traceAsyncFn(\n        async () =>\n          await overrides.customOptions.call(this, loaderOptions, {\n            source,\n            map: inputSourceMap,\n          })\n      )\n      customOptions = result.custom\n      loaderOptions = result.loader\n    }\n\n    // Standardize on 'sourceMaps' as the key passed through to Webpack, so that\n    // users may safely use either one alongside our default use of\n    // 'this.sourceMap' below without getting error about conflicting aliases.\n    if (\n      Object.prototype.hasOwnProperty.call(loaderOptions, 'sourceMap') &&\n      !Object.prototype.hasOwnProperty.call(loaderOptions, 'sourceMaps')\n    ) {\n      loaderOptions = Object.assign({}, loaderOptions, {\n        sourceMaps: loaderOptions.sourceMap,\n      })\n      delete loaderOptions.sourceMap\n    }\n\n    const programmaticOptions = Object.assign({}, loaderOptions, {\n      filename,\n      inputSourceMap: inputSourceMap || undefined,\n\n      // Set the default sourcemap behavior based on Webpack's mapping flag,\n      // but allow users to override if they want.\n      sourceMaps:\n        loaderOptions.sourceMaps === undefined\n          ? this.sourceMap\n          : loaderOptions.sourceMaps,\n\n      // Ensure that Webpack will get a full absolute path in the sourcemap\n      // so that it can properly map the module back to its internal cached\n      // modules.\n      sourceFileName: filename,\n      caller: {\n        name: 'babel-loader',\n\n        // Provide plugins with insight into webpack target.\n        // https://github.com/babel/babel-loader/issues/787\n        target: this.target,\n\n        // Webpack >= 2 supports ESM and dynamic import.\n        supportsStaticESM: true,\n        supportsDynamicImport: true,\n\n        // Webpack 5 supports TLA behind a flag. We enable it by default\n        // for Babel, and then webpack will throw an error if the experimental\n        // flag isn't enabled.\n        supportsTopLevelAwait: true,\n        ...loaderOptions.caller,\n      },\n    })\n    // Remove loader related options\n    delete programmaticOptions.cacheDirectory\n    delete programmaticOptions.cacheIdentifier\n\n    const partialConfigSpan = trace('babel-load-partial-config-async')\n    const config = partialConfigSpan.traceFn(() => {\n      return babel.loadPartialConfig(programmaticOptions)\n    })\n\n    if (config) {\n      let options = config.options\n      if (overrides && overrides.config) {\n        const overridesSpan = trace('loader-overrides-config')\n        options = await overridesSpan.traceAsyncFn(\n          async () =>\n            await overrides.config.call(this, config, {\n              source,\n              map: inputSourceMap,\n              customOptions,\n            })\n        )\n      }\n\n      if (options.sourceMaps === 'inline') {\n        // Babel has this weird behavior where if you set \"inline\", we\n        // inline the sourcemap, and set 'result.map = null'. This results\n        // in bad behavior from Babel since the maps get put into the code,\n        // which Webpack does not expect, and because the map we return to\n        // Webpack is null, which is also bad. To avoid that, we override the\n        // behavior here so \"inline\" just behaves like 'true'.\n        options.sourceMaps = true\n      }\n\n      const { cacheDirectory, cacheIdentifier } = loaderOptions\n\n      let result\n      if (cacheDirectory) {\n        result = await cache({\n          source,\n          options,\n          cacheDirectory,\n          cacheIdentifier,\n          cacheCompression: false,\n        })\n      } else {\n        const transformSpan = trace('transform')\n        transformSpan.setAttribute('filename', filename)\n        transformSpan.setAttribute('cache', 'DISABLED')\n        result = await transformSpan.traceAsyncFn(async () => {\n          return transform(source, options)\n        })\n      }\n\n      // TODO: Babel should really provide the full list of config files that\n      // were used so that this can also handle files loaded with 'extends'.\n      if (typeof config.babelrc === 'string') {\n        this.addDependency(config.babelrc)\n      }\n\n      if (result) {\n        const { code, map } = result\n\n        return [code, map]\n      }\n    }\n\n    // If the file was ignored, pass through the original content.\n    return [source, inputSourceMap]\n  })\n}\n"]}