{"version":3,"sources":["../../../next-server/server/config-utils.ts"],"names":["reasonMessage","reason","loadWebpackHook","phase","dir","useWebpack5","usesRemovedFlag","worker","Worker","path","resolve","__dirname","enableWorkerThreads","numWorkers","forkOptions","env","process","NODE_OPTIONS","result","shouldLoadWithWebpack5","PHASE_PRODUCTION_SERVER","Log","info","enabled","Boolean","end","Error"],"mappings":"6EAAA,kDACA,uCACA,mEAEA,wD,oHACA,2C,w4BAIA,QAASA,CAAAA,aAAT,CAAuBC,MAAvB,CAA6C,CAC3C,OAAQA,MAAR,EACE,IAAK,SAAL,CACE,MAAO,oBAAP,CACF,IAAK,eAAL,CACE,MAAO,iDAAP,CACF,IAAK,WAAL,CACE,MAAO,oBAAP,CACF,QACE,MAAO,EAAP,CARJ,CAUD,CAEM,cAAeC,CAAAA,eAAf,CAA+BC,KAA/B,CAA8CC,GAA9C,CAA2D,CAChE,GAAIC,CAAAA,WAAW,CAAG,IAAlB,CACA,GAAIC,CAAAA,eAAe,CAAG,KAAtB,CACA,KAAMC,CAAAA,MAAM,CAAG,GAAIC,mBAAJ,CACbC,cAAKC,OAAL,CAAaC,SAAb,CAAwB,0BAAxB,CADa,CAEb,CACEC,mBAAmB,CAAE,KADvB,CAEEC,UAAU,CAAE,CAFd,CAGEC,WAAW,CAAE,CACXC,GAAG,CAAE,CACH,GAAGC,OAAO,CAACD,GADR,CAEHE,YAAY,CAAE,EAFX,CADM,CAHf,CAFa,CAAf,CAeA,GAAI,CACF,KAAMC,CAAAA,MAAmB,CAAG,KAAMX,CAAAA,MAAM,CAACY,sBAAP,CAA8BhB,KAA9B,CAAqCC,GAArC,CAAlC,CACA,GAAIc,MAAM,CAACjB,MAAP,GAAkB,aAAtB,CAAqC,CACnCK,eAAe,CAAG,IAAlB,CACD,CAFD,IAEO,CACL,GAAIH,KAAK,GAAKiB,kCAAd,CAAuC,CACrCC,GAAG,CAACC,IAAJ,CACG,iBAAgBJ,MAAM,CAACK,OAAP,CAAiB,GAAjB,CAAuB,GAAI,aAAYvB,aAAa,CACnEkB,MAAM,CAACjB,MAD4D,CAEnE,4CAHJ,EAKD,CACF,CAEDI,WAAW,CAAGmB,OAAO,CAACN,MAAM,CAACK,OAAR,CAArB,CACD,CAAC,cAAM,CACN;AACA;AACD,CAlBD,OAkBU,CACRhB,MAAM,CAACkB,GAAP,GACD,CAED,GAAInB,eAAJ,CAAqB,CACnB,KAAM,IAAIoB,CAAAA,KAAJ,CACJ,qJADI,CAAN,CAGD,CAED,+BAAQrB,WAAR,EACD","sourcesContent":["import path from 'path'\nimport { Worker } from 'jest-worker'\nimport * as Log from '../../build/output/log'\nimport { CheckReasons, CheckResult } from './config-utils-worker'\nimport { install, shouldLoadWithWebpack5 } from './config-utils-worker'\nimport { PHASE_PRODUCTION_SERVER } from '../lib/constants'\n\nexport { install, shouldLoadWithWebpack5 }\n\nfunction reasonMessage(reason: CheckReasons) {\n  switch (reason) {\n    case 'default':\n      return 'Enabled by default'\n    case 'flag-disabled':\n      return 'webpack5 flag is set to false in next.config.js'\n    case 'test-mode':\n      return 'internal test mode'\n    default:\n      return ''\n  }\n}\n\nexport async function loadWebpackHook(phase: string, dir: string) {\n  let useWebpack5 = true\n  let usesRemovedFlag = false\n  const worker = new Worker(\n    path.resolve(__dirname, './config-utils-worker.js'),\n    {\n      enableWorkerThreads: false,\n      numWorkers: 1,\n      forkOptions: {\n        env: {\n          ...process.env,\n          NODE_OPTIONS: '',\n        },\n      },\n    }\n  ) as Worker & {\n    shouldLoadWithWebpack5: typeof import('./config-utils-worker').shouldLoadWithWebpack5\n  }\n  try {\n    const result: CheckResult = await worker.shouldLoadWithWebpack5(phase, dir)\n    if (result.reason === 'future-flag') {\n      usesRemovedFlag = true\n    } else {\n      if (phase !== PHASE_PRODUCTION_SERVER) {\n        Log.info(\n          `Using webpack ${result.enabled ? '5' : '4'}. Reason: ${reasonMessage(\n            result.reason\n          )} https://nextjs.org/docs/messages/webpack5`\n        )\n      }\n    }\n\n    useWebpack5 = Boolean(result.enabled)\n  } catch {\n    // If this errors, it likely will do so again upon boot, so we just swallow\n    // it here.\n  } finally {\n    worker.end()\n  }\n\n  if (usesRemovedFlag) {\n    throw new Error(\n      '`future.webpack5` in `next.config.js` has moved to the top level `webpack5` flag https://nextjs.org/docs/messages/future-webpack5-moved-to-webpack5'\n    )\n  }\n\n  install(useWebpack5)\n}\n"]}